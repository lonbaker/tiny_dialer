#!/usr/bin/env ruby

require_relative '../lib/tiny_dialer'
require TinyDialer::MODEL_ROOT/:init
require TinyDialer::LIBROOT/:tiny_dialer/:hopper
require TinyDialer::LIBROOT/:tiny_dialer/:dialer
require "eventmachine"
require "fsr"
require "fsr/command_socket"

class TinyDialer::DialManager
  attr_reader :hopper, :host, :pass
  def initialize(o = {:dialers => 1, :host => '127.0.0.1', :pass => 'ClueCon'})
    @host         = o[:host] || '127.0.0.1'
    @pass         = o[:pass] || 'ClueCon'
    @proxy_server = o[:proxy_server] || '127.0.0.1'

    TinyDialer::Log.info "DialManager initialized with #{max_dials} dialers"

    @hopper = TinyDialer::Hopper.create(:max_size => 100)
    @dialer = TinyDialer::Dialer.new(
      host: @host,
      pass: @pass,
      hopper: @hopper,
      proxy_server: @proxy_server
    )

    @interval = 5
    EM.add_timer(@interval, method(:timer_tick))
  end

  def current_dials
    sock = FSR::CommandSocket.new(:server => @host, :pass => @pass)
    sock.channels.run.select{|ch| ch.dest != "19999" }
  end

  def max_dials
    TinyDialer.db[:dialer_pool].first[:dialer_max]
  end

  def dial_ratio
    TinyDialer.db[:dialer_pool].first[:ratio]
  end

  def need_dials
    max_dials - current_dials.size
  end

  def timer_tick
    EM.defer do
      begin
        if dial
          @interval = 0.05
        else
          @interval = [10, @interval * 1.2].min
        end
      rescue Exception => ex
        TinyDialer::Log.error ex
      ensure
        EM.add_timer(@interval, method(:timer_tick))
      end
    end
  end

  def dial
    needed = self.need_dials
    ratio = self.dial_ratio
    aim = needed * ratio

    if aim < 1
      old = @interval
      @interval = [7, @interval * 1.2].min

      if old == @interval
        return false
      else
        TinyDialer::Log.info "No more leads to load the hopper today, set interval to %.2f" % [@interval]
        return false
      end
    else
      TinyDialer::Log.info "Try to dial, needed: %d, ratio: %.3f, aim: %.2f" % [needed, ratio, aim]
      @dialer.dial
      return true
    end
  end
end

::EM.run do
  opts = {}
  opts[:proxy_server] = ENV["TD_PROXY_SERVER"]

  FSR.load_all_commands
  TinyDialer::DialManager.new(opts)
end
